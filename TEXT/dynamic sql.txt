+ 동적 SQL 쿼리

 - 동적( Dynamic ) 으로 변화되어야하는 SQL 쿼리를 작성할 수 있도록
  도와주는 마이바티스 태그
  
 - <select>, <insert>, <delete>, <update> 안에서 사용한다
 
 - <if>, <choose>, <trim>, <foreach> 태그를 제공한다


+ if 태그

 - test 속성의 값을 이용하여 조건문을 지정한다
 
 - test 속성의 값은 "true" / "false" 가 되도록 만든다
 
 - test 속성의 값은 문자열로 처리된다
 - "true" 나 "false" 가 아니면 "true" 로 취급된다
 
 - 조건의 결과에 따라 쿼리의 추가 여부가 결정된다
 
      <select id="" parameterType="web.dto.Emp">
        SELECT * FROM EMP
        WHERE 1=1
        
        <if test="empno !=null">
          AND empno=#{empno}
        </if>
        
        <if test="ename !=null and !ename.equals('')">
          and ename=#{ename}
        </if>
        
      </select>
      
      ex) parameterType 이 "string" 일 경우 value 키워드 사용을 고려할 것!
      <select id="" parameterType="string">
        select * from test
        <if test="value==null">
          where testid=#{value}
        </if>
      </select>
      

+ <choose>, <when>, <otherwise> 태그

 - if ~ else if ~ else 구문과 비슷한 제어문 태그
 
 - <choose> 안에 <when> 태그로 조건문을 작성한다
 
 - <when> 태그에 test 속성으로 조건문을 작성하여 else if같은 역할을 한다
 
 - <when> 들의 마지막으로 <otherwise> 태그를 사용하여 else 같은 역할을 한다
      
        ex)     <choose>
                  <when test="조건문">
                  </when>
                  <when test="조건문1">
                  </when>
                  ,,,
                  
                  <otherwise>
                  </otherwise>
                </choose>
               

+ <trim> 태그

 - WHERE 절이나 UPDATE 의 SET 절에서 사용된다
 
 - 동적쿼리가 전달파라미터에 따라 추가되지 않는 상황에서 AND 나 OR 같은
  키워드가 충돌날 수 있는 상황에서 사용한다
  
 - SET 절에서는 마지막 ',' 를 고려해서 사용한다
 
 - <trim> 태그의 속성
 
      prefix : 접두어 지정
      
      prefixOverrides : 접두어로 설정한 값과 겹쳐지면 제거할 항목을 지정
      
      suffix : 접미어 지정
      
      suffixOverrides : 접미어로 설정한 값과 겹쳐지면 제거할 항목을 지정
      
      
+ <foreach> 태그

 - 반복되는 구문을 동적으로 생성할 때 사용하는 태그
 
 - 배열 / 해시맵 타입의 파라미터를 처리할 때 유용하다
 - 마이바티스의 전달파라미터는 hashmap 으로 처리하는 것이 좋다
 - 배열이나 리스트는 해시맵에 put 하여 전달한다
 
      ex) checkbox 선택 항목에 대한 조건 처리를 할 때 유용하다
      
      
+ 마이바티스의 SqlSession 객체의 구문을 실행하는 메소드

 - <T> T selectOne(String statement, Object Parameter)
       하나의 객체를 리턴하는 조회 구문 수행 메소드
       
 - <E> List<E> selectList(String statement, Object Parameter) 
       한 개 이상의 객체를 리턴하는 조회 구문 수행 메소드

 - <K, V> Map<K, V> selectMap(String statement, Object Parameter, String mapKey)
       결과 데이터를 Map으로 변환하기 위해 제공되는 메소드 
       
       
 - <T> Cursor<T> selectCursor(String statement, Object Parameter)
       결과 데이터를 Cursor객체로 반환하는 메소드
       
       
 - int insert( String statement, Object parameter)
 - int update( String statement, Object parameter)
 - int delete( String statement, Object parameter)
       반환데이터는 SQL 구문에 의해 영향을 받은 레코드 (행) 수를 나타낸다
       
 ** 위 모든 메소드들은 Object parameter 없이 호출될 수 있도록 오버로딩되어있음


+ 마이바티스 매퍼의 쿼리 수행 태그

 - <select>, <insert>, <delete>, <update> 태그
 
 - 수행할 SQL 쿼리에 맞게 태그를 골라 작성하면 된다
 
 - 쿼리와 똑같지 않은 태그를 사용해도 실행은 되지만 되도록 일치시키도록 한다
 
 
+ 공통 속성

 - id 
     해당 매퍼 파일(xml) 에서 유일한 값으로 설정한다
     해당 네임스페이스에서 구분자( 식별값 ) 역할을 수행한다
     
     DAO 인터페이스의 추상메소드의 이름과 같은 이름으로 작성하도록 한다
     
     
 - parameterType
     쿼리 수행에 필요한 전달 파라미터의 데이터타입을 명시하는 속성

 - flushCache
     구문이 실행될 때마다 캐시를 지울 것인지 설정하는 항목 ( 기본값은 false )
 
 - timeout
     데이터베이스 처리 결과를 기다리는 최대 시간
 
 - statementType
     쿼리 수행방식에 대한 설정
     Statement, PreparedStatement(기본값), Callable 중 선택
     
     
     
+ <select> 요소 전용 속성

 - resultType
     Select 수행 결과 (ResultSet) 를 처리할 데이터타입( 실제 데이터 타입 )
     참조형 (DTO) 라면 패키지까지 포함하여 풀네임으로 작성한다
     
 - resultMap
     select 수행 결과( ResultSet ) 를 처리할 <resultMap>
     <resultMap> 태그를 이용하여 생성한 id를 이용한다
     
 
  - useCache
     구문의 결과를 캐시에 저장할 것인지 설정하는 항목( 기본값은 true )
     
 
  - fetchSize
     select 결과를 한번에 가져올 크기(개수) 를 설정하는 속성
     
     기본값 10
     ** 대용량 데이터 처리가 필요하면 1000개 정도를 설정하는 편
     
  - resultSetType
    조회 결과값을 읽어오는 동작에 대한 설정
    db의 커서객체 동작을 설정함
    
   FORWARD_ONLY
      한쪽 방향으로 읽음(보통)
   <!--SCROLL은 잘안사용한다-->
   
   SCROLL_SENSITIVE
      SCROLL=다시 돌아가는것/변화가 있으면 바로 반응
      
   SCROLL_INSENSITIVE
      변화가 있어도 반응하지 않음
    
    
  
+ 마이바티스의 내장 Cache(캐시) 

 - 2가지 내장 캐시가 존재함
 
    Local Session Cache
    Second Level Cache (2nd Level)
    
    
+ Local Session Cache( Session Level Cache )

 - SqlSession 객체마다 가지고 있는 캐시
 
 - 개발자가 임의로 기능을 해제할 수 없다
 

+ Second Level Cache

 - Mapper 의 namespace 마다 존재하는 캐시












      
      
